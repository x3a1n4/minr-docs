{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#minr-player-utility-documentation","title":"Minr Player Utility Documentation","text":"<p>This is a Material for MkDocs website for hosting documentation for the tools written by players for the server <code>zero.minr.org</code>. Conceptually similar to the celeste helper list.</p> <p>What is this site for?</p> <p>This site is for all minr players! </p> <ul> <li>It's for mappers, who want to find mapping-oriented tools, such as [TODO: example] or [TODO: example]. Any utility tagged with Mapping can be imported and used, with no scripting neccessary.</li> <li>It's for scripters, who want to know what to build off of. Ever wanted to [TODO: example]? Any utility tagged with Scripting is a library that you can use in your code.</li> <li>It's for players, who get better maps!</li> </ul>"},{"location":"#check-out-all-documented-utilities-at-all-utilities","title":"Check out all documented utilities at All Utilities","text":""},{"location":"#for-information-on-how-you-can-document-your-scripts-here-check-out-how-to-document-your-utility","title":"For information on how you can document your scripts here, check out How to Document Your Utility","text":"A Note About Dependencies <p>In the javascript world, there's an environment known as Node.js. You've encountered it if you've ever tried to write a discord bot. It's the most popular backend environment that exists. </p> <p>And with that popularity comes hell. Specifically, dependancy hell. Node.js is infamous for its sprawling dependancy trees, leading to nigh-undebuggable problems. You can install the package <code>everything</code>, which has over a million dependancies and will instantly ban you from npm. The package <code>is-even</code> checks if a number is even, and had 165,708 downloads this week.</p> <p>Minr is probably worse.</p> <p>If you use a namespace that you don't control, and especially if you use a namespace that you don't have the source code of, it's succeptible to all sorts of problems.</p> <ul> <li>Data loss from the code updating</li> <li>Data loss from somebody else using the namespace the wrong way</li> <li>Unexpected functionality changing when code updates</li> <li>The utility doesn't work as it should</li> <li>The utility has an exploit, causing all dependants to be succeptible</li> <li>And so on...</li> </ul> <p>For these reasons, the Core tag exists. These are utilities that are widely-used, safe to use, or otherwise reputable in the community. If you're looking for specific functionality, seek these out first, and use your best judgement before building on top of newer, smaller utilities.</p> <p>Ultimately, I can't really speak more about this, since I have no software infrastructural skills. So I'll stop here. Hopefully together, we can avoid a minr left-pad incident (you guessed it, also Node.js! Incredible piece of software that is)</p>"},{"location":"all_scripts/","title":"All Utilities","text":"<p>eggshells</p> <p>Scripting msc Github</p> <ul> <li>A small implementation of string:string hashmaps in minr</li> </ul> <p>eggshells</p> <p>Scripting msc</p> <ul> <li>A small tools for returning entities from selectors. Credit to Vaporizor</li> </ul> <p>eggshells</p> <p>Scripting Github Website</p> <ul> <li>A utility website for generating documentation from .nms files</li> </ul> <p>eggshells</p> <p>Scripting msc</p> <ul> <li>A utility for spawning and binding interact entities that ride the player</li> </ul> <p>eggshells</p> <p>Mapping Github</p> <ul> <li>A bundle of Minr scripts to replicate the most useful bits of worldedit + axiom</li> </ul> <p>eggshells</p> <p>Scripting msc</p> <ul> <li>A small logger utility that sends messages to a player (or list of players) with tellraw</li> </ul> <p>eggshells</p> <p>Scripting msc</p> <ul> <li>A small library for converting worlds from their bucket names to vanilla names</li> </ul>"},{"location":"all_scripts/#stringhashmap","title":"StringHashMap","text":""},{"location":"all_scripts/#entitycapture","title":"entityCapture","text":""},{"location":"all_scripts/#nms-to-mkdocs-converter","title":".nms to mkdocs Converter","text":""},{"location":"all_scripts/#playerclickhandler","title":"playerclickhandler","text":""},{"location":"all_scripts/#terarabbits","title":"TeraRabbits","text":""},{"location":"all_scripts/#logger","title":"logger","text":""},{"location":"all_scripts/#worldutils","title":"worldUtils","text":""},{"location":"how_to_document_your_script/","title":"How to Document Your Utility","text":""},{"location":"how_to_document_your_script/#why-should-i-do-this","title":"Why Should I do This?","text":"<p>Do you check all these boxes?</p> <ul> <li> I have a script on Minr</li> <li> Other people may find it useful</li> </ul> <p>If so, other people are going to want to use your script! This is the place to tell them how.</p> <p>Why not use the Minr forums?</p> <p>Forums are great for announcements and back-and-forth discussion, but they're not great at hosting documentation. They're much less searchable, much worse at technical formatting (especially code blocks), and account locked. By keeping all the docs in one place, it maximizes the visibility of each project, and thus minimizes the amount of utility scripts players need to re-write for maps.</p>"},{"location":"how_to_document_your_script/#how-do-i-do-this","title":"How Do I do This?","text":"<ul> <li>Install Material for MkDocs</li> <li>Fork this repo</li> <li>Add a folder in <code>./docs/minr_scripts</code>. Name it something representing your project (usually, the namespace used)</li> <li>Add a file <code>index.md</code> to your folder. This is the default landing page for your utility!</li> <li>Ensure that your <code>index.md</code> file starts similar to the following:</li> </ul> <pre><code>&lt;!-- minrdocs:mapping --&gt; &lt;!-- minrdocs:msc --&gt; &lt;!-- minrdocs:github https://github.com/x3a1n4/minr --&gt; (1)\n&lt;!-- utilityinfo:name TeraRabbits --&gt; (2)\n&lt;!-- utilityinfo:author eggshells --&gt; (3)\n&lt;!-- utilityinfo:dependencies StringHashMap --&gt; (4)\n&lt;!-- utilityinfo:description A bundle of Minr scripts to replicate the most useful bits of worldedit + axiom. Often updated. --&gt; (5)\n</code></pre> <ol> <li>These are the tags shown at the top of the page and on the list in All Utilities. For the full list of tags, see the Tags page or its source code</li> <li>This is the name of your utility. It will show up as this in the utility list on All Utilities</li> <li>This is you! It can also include anyone who contributed, or anything at all. This shows up as the author on All Utilities</li> <li>This is a comma separated list of all the projects your utility uses as a dependancy. Leave as <code>&lt;!-- utilityinfo:no_dependencies --&gt;</code> if your namespace does not use anything else! This is not currently shown on the docs. </li> <li>This is what your utility does. Try to keep it short if possible, so that it fits on the All Utilities list</li> </ol> <p>What does this code block mean?</p> <p>This is an example custom header, with something similar specified at the top of all utility <code>index.md</code> files. You should never need to modify files outside of your utility documentation folder. Instead, all the info presented in All Utilities is generated on build.</p> <p>To learn more, click the  symbols in the block above!</p> <ul> <li>Check that everything looks good by running <code>mkdocs serve</code> from the top-level <code>./minr-docs</code> folder. Navigate to localhost:8000 to view your documentation!</li> </ul> <p>PermissionError: [WinError 10013]</p> <p>I ran into this when building this. Poking around, it seemed like there was already something on my 8000 port, and so it was throwing this rather unhelpful error message. Hosting it on a different port with <code>mkdocs serve -a localhost:XXXX</code> worked for me.</p> <ul> <li>Create a pull request</li> <li>DM or ping me on discord <code>@billy bobby joey</code> (since that is unfortunately where I'm most active). <sub>If this step gets deleted, it's because I've set up a discord server with a webhook or something. Tell me I need to get on that.</sub> </li> </ul> Have tons of documentation? <p>If you have a lot of documentation to add, consider asking me to become a collaborator to the repo! It'll save a bunch of hassle.</p>"},{"location":"tags/","title":"Tags","text":""},{"location":"tags/#usability","title":"Usability","text":""},{"location":"tags/#mapping","title":"Mapping \u2013 Mapping","text":"<p>Mapping utilities are meant to be used by mappers, with no scripting necessary!</p>"},{"location":"tags/#scripting","title":"Scripting \u2013 Scripting","text":"<p>Scripting utility primarily provides tools for scripts, such as utility functions or data structures.</p>"},{"location":"tags/#internal","title":"Internal \u2013 Internal Use","text":"<p>An internal namespace, class, or function is used only within the scope of another utility, and should not be used in scripts or in maps directly.</p>"},{"location":"tags/#type","title":"Type","text":""},{"location":"tags/#msc","title":"msc \u2013 msc","text":"<p>These utilities are used in-game as a script, and written in msc.</p>"},{"location":"tags/#non-msc","title":"Non-msc \u2013 non-msc","text":"<p>These utilities use functionality external to minr, such as on a website or a downloadable program.</p>"},{"location":"tags/#other","title":"Other","text":""},{"location":"tags/#core","title":"Core \u2013 Core","text":"<p>Core utilities are time-tested and reputable, with minimal downsides when it comes to using them. These utilities can only call functions from other Core utilities or themselves. They're also high-quality and worth checking out!</p> <p>Why does this exist?</p> <p>Ideally, every utility gets documented here, even if it's a first project and doesn't work 100% (heck, especially if it's a first project, often new players have incredibly novel and interesting ideas and they deserve to be seen!) This tag allows the barrier of entry on these docs to stay open for everyone. </p>"},{"location":"tags/#github","title":"Github \u2013 Github","text":"<p>This symbol denotes that a utility has a github. Click on the text to open the github repo.</p>"},{"location":"tags/#website","title":"Website \u2013 Website","text":"<p>This symbol denotes that a utility has a website. Click on the text to open the site.</p>"},{"location":"minr_scripts/TeraRabbits/","title":"Index","text":"<p>Mapping Github</p>"},{"location":"minr_scripts/TeraRabbits/#terarabbits","title":"TeraRabbits","text":"<p>This is an msc implementation of my favourite worldedit features!</p> <p></p>"},{"location":"minr_scripts/TeraRabbits/#how-to-use","title":"How to use","text":"<ol> <li>Get an admin to import a binding script</li> <li>Get a TeraRabbits Starter Kit from someone on the server</li> <li>Make sure that you are an owner of the region you want to build in</li> <li>Have fun!</li> </ol> <p>Important info</p> <ul> <li>On starting teraRabbits, you are given a \"stop\" barrier. Right click this to exit</li> <li>By default, teraRabbits changes placement to \"replace\" mode. Where possible, blocks are substituted<ul> <li>Example: right clicking on a stone wall with brick blocks will turn it into a brick wall</li> </ul> </li> <li>There are a number of useful tools, which I can be bothered to list at somepoint in the future.</li> <li>Brushes can take a size argument in square brackets, up to a maximum of <code>6</code>.</li> <li>The items themselves do not matter, just their names.</li> </ul>"},{"location":"minr_scripts/TeraRabbits/#namespaces","title":"Namespaces","text":"<ul> <li><code>teraRabbitsUtils</code></li> <li><code>teraRabbitsTools</code></li> <li><code>teraRabbits</code></li> </ul>"},{"location":"minr_scripts/TeraRabbits/teraRabbits/","title":"teraRabbits","text":"<p>This is the default generated description for the namespace teraRabbits. Include code examples, screenshots, ect. here.</p>"},{"location":"minr_scripts/TeraRabbits/teraRabbits/#classes","title":"Classes","text":"Class Description"},{"location":"minr_scripts/TeraRabbits/teraRabbits/#functions","title":"Functions","text":"Function Description <code>Void enableClickHandler(Player player)</code> The main loop mainloop(Player player) <code>Void disableClickHandler(Player player)</code> No documentation <code>Void onGhastClick(Player player)</code> The ghast click function"},{"location":"minr_scripts/TeraRabbits/teraRabbits/#variables","title":"Variables","text":"Variable Description <code>Entity ghastEntity</code> The ghast that holds onGhastClick"},{"location":"minr_scripts/TeraRabbits/teraRabbitsTools/","title":"teraRabbitsTools","text":"<p>This is the default generated description for the namespace teraRabbitsTools. Include code examples, screenshots, ect. here.</p>"},{"location":"minr_scripts/TeraRabbits/teraRabbitsTools/#classes","title":"Classes","text":"Class Description"},{"location":"minr_scripts/TeraRabbits/teraRabbitsTools/#functions","title":"Functions","text":"Function Description <code>Void selectSingleBlockPattern(Block targetBlock, Player player)</code> Set single block pattern <code>Void sphere(Block targetBlock, Int size, Player player)</code> Create sphere at targetBlock <code>Void paint(Block targetBlock, Int size, Player player)</code> Paint at the target block (don't replace air, TODO: use block replacements) <code>Void erase(Block targetBlock, Int size, Player player)</code> Erase in a sphere <code>Void smooth(Block targetBlock, Int size, Player player)</code> Smooth area around targetBlock <code>Void pull(Block targetBlock, Int size, Player player)</code> Pull area towards player (like spikes) <code>Void flatten(Block targetBlock, Int size, Player player)</code> Flatten area (like a mesa) <code>Void cuboidSelect(Block targetBlock, Player player)</code> set cubiod selection <code>Void cuboidExtend(Block targetBlock, Player player)</code> Extend cuboid to encompass target block <code>Void set(Block targetBlock, Player player)</code> Set blocks in selection (rclick on block) <code>Void setOnlyAir(Block targetBlock, Player player)</code> Set blocks in selection (rclick on block) <code>Void deleteSelection(Block targetBlock, Player player)</code> Delete blocks in selection <code>Void copy(Block targetBlock, Player player)</code> Copy to clipboard from block location <code>Void paste(Block targetBlock, Player player)</code> Paste clipboard at block location <code>Void stack(Int size, Player player)</code> Stack selection in facing direction <code>Void replace(Block targetBlock, Item heldItem, Player player)</code> Replace the block at the target block <code>Void undo(Player player)</code> undo <code>Void spawnRabbit(Block targetBlock, Player player)</code> Spawn invisible rabbit (at top middle of block) <code>Void showRabbits(Player player)</code> Show all rabbits within 25 blocks <code>Void endSession(Player player)</code> End the session"},{"location":"minr_scripts/TeraRabbits/teraRabbitsTools/#variables","title":"Variables","text":"Variable Description <code>teraRabbitsUtils::Pattern pattern</code> sets block selection <code>teraRabbitsUtils::Selection selection</code> No documentation <code>teraRabbitsUtils::Clipboard clipboard</code> No documentation <code>Int selectionPosition</code> No documentation <code>BlockLocation firstPosition</code> No documentation"},{"location":"minr_scripts/TeraRabbits/teraRabbitsUtils/","title":"teraRabbitsUtils","text":"<p>This is the default generated description for the namespace teraRabbitsUtils. Include code examples, screenshots, ect. here.</p>"},{"location":"minr_scripts/TeraRabbits/teraRabbitsUtils/#classes","title":"Classes","text":"Class Description <code>Colour</code> No description <code>Pattern</code> No description <code>BlockAlt</code> No description <code>BlockChange</code> No description <code>BlockCache</code> No description <code>BlockData</code> No description <code>Action</code> No description <code>Selection</code> No description <code>Clipboard</code> No description"},{"location":"minr_scripts/TeraRabbits/teraRabbitsUtils/#functions","title":"Functions","text":"Function Description <code>Void initializeBlockData()</code> No documentation <code>Void trySetBlock(teraRabbitsUtils::Action action, BlockLocation location, String block)</code> Try to set a block given an action <code>Void log(String message)</code> No documentation <code>Block getRelativeBlock(Block block, Int x, Int y, Int z)</code> Get the block relative to a target block <code>String getVanilla(String type)</code> convert a block type to its vanilla variantt <code>Boolean canPlaceBlock(BlockLocation blockLocation, Player player)</code> Whether a player can place a block (for instance: regions, masks)"},{"location":"minr_scripts/TeraRabbits/teraRabbitsUtils/#variables","title":"Variables","text":"Variable Description <code>stringHashMap::SHashMap blockAltLookup</code> No documentation <code>teraRabbitsUtils::Action[] actionList</code> Should be moved to tools? <code>teraRabbitsUtils::BlockData[] bd</code> No documentation <code>String[] blockTypes</code> No documentation"},{"location":"minr_scripts/TeraRabbits/teraRabbitsUtils/Action/","title":"Action","text":"<p>This is the default generated description for the class Action. Include code examples, screenshots, ect. here.</p>"},{"location":"minr_scripts/TeraRabbits/teraRabbitsUtils/Action/#constructors","title":"Constructors","text":"Constructor Description <code>Action Action(String name, Player player)</code> All tool usages should be logged through Actions, so that they can be undone"},{"location":"minr_scripts/TeraRabbits/teraRabbitsUtils/Action/#methods","title":"Methods","text":"Method Description <code>Action Action(String name, Player player)</code> All tool usages should be logged through Actions, so that they can be undone <code>Void add(teraRabbitsUtils::BlockChange change)</code> Add a block change to this action <code>Int length()</code> get number of blocks changed <code>Void undo()</code> undo this action"},{"location":"minr_scripts/TeraRabbits/teraRabbitsUtils/Action/#fields","title":"Fields","text":"Field Description <code>String name</code> No documentation <code>Player player</code> No documentation <code>teraRabbitsUtils::BlockChange[] allBlocksChanged</code> No documentation"},{"location":"minr_scripts/TeraRabbits/teraRabbitsUtils/BlockAlt/","title":"BlockAlt","text":"<p>This is the default generated description for the class BlockAlt. Include code examples, screenshots, ect. here.</p>"},{"location":"minr_scripts/TeraRabbits/teraRabbitsUtils/BlockAlt/#constructors","title":"Constructors","text":"Constructor Description <code>BlockAlt BlockAlt(String type, String block)</code> Constructors"},{"location":"minr_scripts/TeraRabbits/teraRabbitsUtils/BlockAlt/#methods","title":"Methods","text":"Method Description <code>BlockAlt BlockAlt(String type, String block)</code> Constructors"},{"location":"minr_scripts/TeraRabbits/teraRabbitsUtils/BlockAlt/#fields","title":"Fields","text":"Field Description <code>String type</code> No documentation <code>String block</code> No documentation"},{"location":"minr_scripts/TeraRabbits/teraRabbitsUtils/BlockCache/","title":"BlockCache","text":"<p>This is the default generated description for the class BlockCache. Include code examples, screenshots, ect. here.</p>"},{"location":"minr_scripts/TeraRabbits/teraRabbitsUtils/BlockCache/#constructors","title":"Constructors","text":"Constructor Description <code>BlockCache BlockCache(Block block)</code> Creates a cache from a given block"},{"location":"minr_scripts/TeraRabbits/teraRabbitsUtils/BlockCache/#methods","title":"Methods","text":"Method Description <code>BlockCache BlockCache(Block block)</code> Creates a cache from a given block <code>Boolean isEmpty()</code> Returns true if block is air <code>Void set()</code> Sets the block in-world"},{"location":"minr_scripts/TeraRabbits/teraRabbitsUtils/BlockCache/#fields","title":"Fields","text":"Field Description <code>BlockLocation location</code> The location of the block <code>String type</code> No documentation <code>String data</code> No documentation"},{"location":"minr_scripts/TeraRabbits/teraRabbitsUtils/BlockChange/","title":"BlockChange","text":"<p>This is the default generated description for the class BlockChange. Include code examples, screenshots, ect. here.</p>"},{"location":"minr_scripts/TeraRabbits/teraRabbitsUtils/BlockChange/#constructors","title":"Constructors","text":"Constructor Description <code>BlockChange BlockChange(Block block, String to)</code> Sets the block to the given \"to\" TODO: modify so that original state is saved as BlockCache, rather than as string <code>BlockChange BlockChange(teraRabbitsUtils::BlockCache to)</code> No documentation"},{"location":"minr_scripts/TeraRabbits/teraRabbitsUtils/BlockChange/#methods","title":"Methods","text":"Method Description <code>BlockChange BlockChange(Block block, String to)</code> Sets the block to the given \"to\" TODO: modify so that original state is saved as BlockCache, rather than as string <code>BlockChange BlockChange(teraRabbitsUtils::BlockCache to)</code> No documentation <code>Void revert()</code> No documentation"},{"location":"minr_scripts/TeraRabbits/teraRabbitsUtils/BlockChange/#fields","title":"Fields","text":"Field Description <code>teraRabbitsUtils::BlockCache originalBlock</code> No documentation"},{"location":"minr_scripts/TeraRabbits/teraRabbitsUtils/BlockData/","title":"BlockData","text":"<p>This is the default generated description for the class BlockData. Include code examples, screenshots, ect. here.</p>"},{"location":"minr_scripts/TeraRabbits/teraRabbitsUtils/BlockData/#constructors","title":"Constructors","text":"Constructor Description <code>BlockData BlockData(String block, Colour colour)</code> Constructors <code>BlockData BlockData(String block, Colour colour, BlockAlt[] alts)</code> No documentation"},{"location":"minr_scripts/TeraRabbits/teraRabbitsUtils/BlockData/#methods","title":"Methods","text":"Method Description <code>BlockData BlockData(String block, Colour colour)</code> Constructors <code>BlockData BlockData(String block, Colour colour, BlockAlt[] alts)</code> No documentation"},{"location":"minr_scripts/TeraRabbits/teraRabbitsUtils/BlockData/#fields","title":"Fields","text":"Field Description <code>String block</code> No documentation <code>Colour colour</code> No documentation <code>teraRabbitsUtils::BlockAlt[] alts</code> No documentation"},{"location":"minr_scripts/TeraRabbits/teraRabbitsUtils/Clipboard/","title":"Clipboard","text":"<p>This is the default generated description for the class Clipboard. Include code examples, screenshots, ect. here.</p>"},{"location":"minr_scripts/TeraRabbits/teraRabbitsUtils/Clipboard/#constructors","title":"Constructors","text":"Constructor Description <code>Clipboard Clipboard(BlockLocation offset, Player player)</code> No documentation"},{"location":"minr_scripts/TeraRabbits/teraRabbitsUtils/Clipboard/#methods","title":"Methods","text":"Method Description <code>Clipboard Clipboard(BlockLocation offset, Player player)</code> No documentation <code>Void createFromSelection(teraRabbitsUtils::Selection selection)</code> No documentation <code>Void pasteIntoWorldWithOffset(teraRabbitsUtils::Action action, BlockVector3 offset, Boolean ignoreAir)</code> If Ignore Air true, will ignore air blocks <code>Void rotateY(BlockVector3 pivot, Double degrees)</code> Rotates in Y by degrees Not fully implemented <code>Void flip(BlockVector3 pivot, String axis)</code> Flips on specific axis [\"x\", \"y\", \"z\"] Not implemented <code>Void showOrigin()</code> Render the origin point"},{"location":"minr_scripts/TeraRabbits/teraRabbitsUtils/Clipboard/#fields","title":"Fields","text":"Field Description <code>teraRabbitsUtils::BlockCache[] blocks</code> No documentation <code>BlockLocation offset</code> Offset of copy position <code>Player player</code> No documentation"},{"location":"minr_scripts/TeraRabbits/teraRabbitsUtils/Colour/","title":"Colour","text":"<p>This is the default generated description for the class Colour. Include code examples, screenshots, ect. here.</p>"},{"location":"minr_scripts/TeraRabbits/teraRabbitsUtils/Colour/#constructors","title":"Constructors","text":"Constructor Description <code>Colour Colour(Float r, Float g, Float b)</code> Default constructor <code>Colour Colour(Float r, Float g, Float b, Float a)</code> No documentation"},{"location":"minr_scripts/TeraRabbits/teraRabbitsUtils/Colour/#methods","title":"Methods","text":"Method Description <code>Colour Colour(Float r, Float g, Float b)</code> Default constructor <code>Colour Colour(Float r, Float g, Float b, Float a)</code> No documentation <code>Double distance(teraRabbitsUtils::Colour other)</code> No documentation"},{"location":"minr_scripts/TeraRabbits/teraRabbitsUtils/Colour/#fields","title":"Fields","text":"Field Description <code>Float r</code> No documentation <code>Float g</code> No documentation <code>Float b</code> No documentation <code>Float a</code> No documentation"},{"location":"minr_scripts/TeraRabbits/teraRabbitsUtils/Pattern/","title":"Pattern","text":"<p>This is the default generated description for the class Pattern. Include code examples, screenshots, ect. here.</p>"},{"location":"minr_scripts/TeraRabbits/teraRabbitsUtils/Pattern/#constructors","title":"Constructors","text":"Constructor Description <code>Pattern Pattern(String[] blocks, String type)</code> Sets a pattern with a get method Will just be a single block for now But new constructors could add cool patterns in the future <code>Pattern Pattern(String[] blocks, Double[] weights, String type)</code> No documentation"},{"location":"minr_scripts/TeraRabbits/teraRabbitsUtils/Pattern/#methods","title":"Methods","text":"Method Description <code>Pattern Pattern(String[] blocks, String type)</code> Sets a pattern with a get method Will just be a single block for now But new constructors could add cool patterns in the future <code>Pattern Pattern(String[] blocks, Double[] weights, String type)</code> No documentation <code>String get(BlockLocation targetLocation)</code> No documentation"},{"location":"minr_scripts/TeraRabbits/teraRabbitsUtils/Pattern/#fields","title":"Fields","text":"Field Description <code>String[] blocks</code> No documentation <code>String type</code> No documentation"},{"location":"minr_scripts/TeraRabbits/teraRabbitsUtils/Selection/","title":"Selection","text":"<p>This is the default generated description for the class Selection. Include code examples, screenshots, ect. here.</p>"},{"location":"minr_scripts/TeraRabbits/teraRabbitsUtils/Selection/#constructors","title":"Constructors","text":"Constructor Description <code>Selection Selection(Player player)</code> Default constructor"},{"location":"minr_scripts/TeraRabbits/teraRabbitsUtils/Selection/#methods","title":"Methods","text":"Method Description <code>Selection Selection(Player player)</code> Default constructor <code>Void addBlockToSelection(BlockLocation location)</code> No documentation <code>Void addCuboidToSelection(BlockLocation location1, BlockLocation location2)</code> No documentation <code>Void resetSelection()</code> Reset the selection - so that we only need to do initialize the hashmap once <code>BlockLocation[] getBlocks()</code> No documentation"},{"location":"minr_scripts/TeraRabbits/teraRabbitsUtils/Selection/#fields","title":"Fields","text":"Field Description <code>Player player</code> No documentation <code>stringHashMap::SHashMap blocks</code> No documentation <code>BlockVector3 lowerBound</code> No documentation <code>BlockVector3 upperBound</code> No documentation"},{"location":"minr_scripts/entityCapture/","title":"Index","text":"<p>Scripting msc</p>"},{"location":"minr_scripts/entityCapture/#entitycapture","title":"entityCapture","text":"<p>This is a small utility namespace to capture entities from selectors. Heavily based on the similar features in vprutils.</p>"},{"location":"minr_scripts/entityCapture/#getentityfromselector-example","title":"getEntityFromSelector() example:","text":"<pre><code>@bypass /execute in minecraft:theta run summon minecraft:rabbit ~ ~ ~ {Glowing:1b, Tags:[\"eggshellUtilsTest\"]}\n\n@define Entity test = entityCapture::getEntityFromSelector(\"@e[tag=eggshellUtilsTest,limit=1]\", \"theta\") (1)\n\n@player \"Got entity {{test}}\"\n</code></pre> <ol> <li>This line captures a single entity from a selector, in this case the tag given. Note that the limit argument must be provided. In this case, it returns the rabbit just spawned!</li> </ol>"},{"location":"minr_scripts/entityCapture/#getallentitiesfromselector-example","title":"getAllEntitiesFromSelector() example:","text":"<pre><code>@define Entity[] rabbits = entityCapture::getAllEntitiesFromSelector(\"@e[type=minecraft:rabbit]\", \"theta\") (1)\n@player \"Found all rabbits {{rabbits}}\"\n\n@define Entity[] rabbits2 = entityCapture::getAllEntitiesFromSelector(\"@e[limit=1,type=minecraft:rabbit]\", \"theta\") (2)\n@player \"Found only one rabbit {{rabbits2}}\"\n</code></pre> <ol> <li>This code gets all rabbits on the server, and returns them as an <code>Entity[]</code> list</li> <li>By providing a limit argument, you can make sure to get only a limited number of entities.</li> </ol>"},{"location":"minr_scripts/entityCapture/#functions","title":"Functions","text":"Function Description <code>Entity getEntityFromSelector(String selector, String world)</code> Returns an entity from a vanilla selector in world <code>world</code>. Fails if <code>limit=1</code> is not provided. <code>Entity[] getAllEntitiesFromSelector(String selector, String world)</code> Returns a list of all entities matched from the selector in world <code>world</code>. Internal <code>Int[] getDecUUIDFromSelector(String selectorm String world)</code> Returns the decimal UUID from a selector. Copy of vprutils::getDecUUID Internal <code>Void tests()</code> Unit tests"},{"location":"minr_scripts/logger/","title":"Index","text":"<p>Scripting msc</p>"},{"location":"minr_scripts/logger/#logger","title":"logger","text":"<p>This is a small utility library to print messages to a list of players.</p> <p>Why not use <code>@player</code>?</p> <p><code>@player</code> works in 99% of cases, and is usually preferable! This library is meant for edge cases where</p> <ul> <li><code>@player</code> is not available (such as being invoked through <code>@console /function execute</code>)</li> <li>You want to log concurrently to many players at the same time</li> <li>You want a consistent set of formatting across your logs</li> </ul> <p></p> <p>This is a small utility namespace that supports debugs, logs, warnings, and errors to a player or list of players. This namespace uses <code>/tellraw</code> commands and slytools Text to Tellraw utility to allow for custom formatting, as well as in-built support for timestamps.</p>"},{"location":"minr_scripts/logger/#example-code-from-tests","title":"Example code (from <code>tests()</code>)","text":"<pre><code>@define logger::Logger logger = logger::Logger(\"Test 1\") (1).setPlayerList(Player[p]) (2)\n\n@var logger.debug(\"Debug message\")\n@var logger.log(\"Log message\")\n@var logger.warning(\"Warning message\")\n@var logger.error(\"Error message\")\n\n@player Now showing timestamps + debug\n@var logger.showDebug(true).showTimestamps(true) (3)\n@var logger.debug(\"Debug message\")\n@var logger.log(\"Log message\")\n@var logger.warning(\"Warning message\")\n@var logger.error(\"Error message\")\n</code></pre> <ol> <li>This is the name of the logger. By default, it is printed in bold at the start of each log.</li> <li>To use the <code>Logger</code> class, you need to specify what players you want to log to. Here, <code>p</code> is just defined to be <code>player</code>.</li> <li>Most functions in the logger class return the logger object, allowing for single-line definitions such as this.</li> </ol>"},{"location":"minr_scripts/logger/#classes","title":"Classes","text":"Class Description <code>Logger</code> The logger object"},{"location":"minr_scripts/logger/#functions","title":"Functions","text":"Function Description Internal <code>Void tests(Player p)</code> Unit tests"},{"location":"minr_scripts/logger/Logger/","title":"Logger","text":"<p>Any function that returns <code>logger::Logger</code> is returning itself, allowing for single-line definitions.</p> <p>Note that any format will search and replace the following codes:</p> <ul> <li><code>{name}</code> is replaced with the Logger's <code>name</code></li> <li><code>{time}</code> is replaced with the timestamp (or removed if timestamps are disabled)</li> <li><code>{message}</code> is replaced with the message to be logged</li> </ul>"},{"location":"minr_scripts/logger/Logger/#constructors","title":"Constructors","text":"Constructor Description <code>Logger Logger(String name)</code> Create a <code>Logger</code> object with name <code>name</code>"},{"location":"minr_scripts/logger/Logger/#methods","title":"Methods","text":"Method Description <code>Void debug(String debug)</code> Log a debug message <code>Void log(String log)</code> Log a log (or info) <code>Void warning(String warning)</code> Log a warning <code>Void error(String error)</code> Log an error Internal <code>Void tellAllPlayers(String message, String format)</code> Send messages to all players in <code>playerList</code> <code>logger::Logger setPlayerList(Player[] players)</code> Set the player list that this logger logs to <code>logger::Logger showTimestamps(Boolean showTimestamps)</code> Sets whether to display timestamps in log messages.  Timestamps are always shown in square brackets, and use server-time. <code>logger::Logger showDebug(Boolean showDebug)</code> Sets whether to display debug messages <code>logger::Logger setDebugFormat(String format)</code> Change the debug format  Default: <code>\"&amp;2{time}&amp;l{name} Debug: &amp;r&amp;a{message}\"</code> <code>logger::Logger setLogFormat(String format)</code> Change the log format  Default: <code>\"&amp;8{time}&amp;l{name}: &amp;r&amp;7{message}\"</code> <code>logger::Logger setWarningFormat(String format)</code> Change the warning format  Default: <code>\"&amp;6{time}&amp;l{name} Warning: &amp;r&amp;e{message}\"</code> <code>logger::Logger setErrorFormat(String format)</code> Change the error format  Default: <code>\"&amp;4{time}&amp;l{name} Error: &amp;c&amp;l{message}\"</code>"},{"location":"minr_scripts/logger/Logger/#fields","title":"Fields","text":"Field Description <code>String name</code> No documentation <code>Player[] playerList</code> No documentation <code>Boolean showingTimestamps</code> No documentation <code>Boolean showingDebugs</code> No documentation <code>String debugFormat</code> No documentation <code>String logFormat</code> No documentation <code>String warningFormat</code> No documentation <code>String errorFormat</code> No documentation"},{"location":"minr_scripts/nms-to-mkdocs-converter/","title":"Index","text":"<p>Scripting Github Website</p>"},{"location":"minr_scripts/nms-to-mkdocs-converter/#nms-to-mkdocs-converter","title":".nms to mkdocs Converter","text":"<p>This is a utility website that generates a documentation structure from an uploaded .nms file.  It doesn't do everything automatically, but it gets pretty far.</p> <p></p>"},{"location":"minr_scripts/nms-to-mkdocs-converter/#features","title":"Features:","text":"<ul> <li>Generates a file for each class called <code>[ClassName].md</code></li> <li>Generates an <code>index.md</code> file for each namespace</li> <li>Generates a <code>index.md</code> file for the project as a whole</li> <li>Attempts to use comments above members as descriptions</li> <li>Generated folder can simply be dropped into the Minr Player Utilities <code>minr_scripts</code> folder</li> </ul> <p>Credit to Lightwood13 for the .nms parser in the Minr Scripts vscode extension, which this project is fundamentally based on!</p> <p>Check out the site here!</p>"},{"location":"minr_scripts/playerclickhandler/","title":"Index","text":"<p>Scripting msc</p>"},{"location":"minr_scripts/playerclickhandler/#playerclickhandler","title":"playerclickhandler","text":"<p>This is a scripting utility that allows for spawning and binding interact entities that ride the player. Essentially, it allows for right-click scripts.</p>"},{"location":"minr_scripts/playerclickhandler/#example-code","title":"Example Code","text":"<pre><code>@define InteractEntity ie = InteractEntity(player) (1)\n@var ie.setRemainingUses(5) (2)\n@var ie.onInteractBindings.add(\"playerclickhandler::tests\") (3)\n@var ie.onKillBindings.add(\"playerclickhandler::testLog\") (4)\n</code></pre> <ol> <li>Create the InteractEntity, and make it follow the player <code>player</code></li> <li>Set the number of uses on the InteractEntity to <code>5</code>. This makes it such that the entity can be clicked five times before disabling.</li> <li>Bind the function <code>playerclickhandler::tests(Player player)</code> to onInteractBindings. This is triggered every time the player clicks the entity.  Note that the function is defined as <code>tests(Player player)</code>. Functions must take a player input to be bound.</li> <li>Bind the function <code>playerclickhandler::testLog(Player player)</code> to onKillBindings. This is triggered when the entity dies, which will happen after five clicks. </li> </ol>"},{"location":"minr_scripts/playerclickhandler/#classes","title":"Classes","text":"Class Description <code>BindingList</code> A class that holds a list of functions to be triggered <code>InteractEntity</code> The entity that the player interacts with"},{"location":"minr_scripts/playerclickhandler/#functions","title":"Functions","text":"Function Description Internal <code>Void onInteract(Player player, Entity entity)</code> Called on any interact. This function has a wrapper! Internal <code>Void tests(Player player)</code> Unit tests Internal <code>Void testLog(Player player)</code> More unit tests"},{"location":"minr_scripts/playerclickhandler/#variables","title":"Variables","text":"Variable Description Internal <code>InteractEntity playerEntity</code> No documentation Internal <code>Int testStage</code> Variable used for testing"},{"location":"minr_scripts/playerclickhandler/BindingList/","title":"BindingList","text":"<p>This is a structure that holds a list of bindings, for use in an interact entity. </p> <p>Bindings are triggered with the following snippet in <code>trigger.msc</code>: <pre><code>@console /function execute {{function}}(Player(\"{{player}}\"))\n</code></pre></p> <p>Important usage instructions!</p> <ul> <li>All bindings must take in a player as a function call and nothing else<ul> <li><code>foo(Player p)</code> works, but <code>foo(Player p, Boolean b)</code> or <code>foo()</code> do not</li> </ul> </li> <li>Bindings need a namespace to attach<ul> <li>Use <code>example::foo</code>, rather than <code>foo</code></li> </ul> </li> <li>Do not include arguments in the call<ul> <li>For instance, call <code>BindingList.add(example::foo)</code> not <code>BindingList.add(example::foo(Player p))</code></li> </ul> </li> </ul>"},{"location":"minr_scripts/playerclickhandler/BindingList/#constructors","title":"Constructors","text":"Constructor Description Internal <code>BindingList BindingList()</code> Default constructor"},{"location":"minr_scripts/playerclickhandler/BindingList/#methods","title":"Methods","text":"Method Description <code>Void add(String function)</code> Add a binding <code>Void remove(String function)</code> Remove a binding <code>Void removeAllBindings()</code> Remove all bindings <code>Void trigger(Player player)</code> Trigger all bindings"},{"location":"minr_scripts/playerclickhandler/BindingList/#fields","title":"Fields","text":"Field Description Internal <code>String[] bindings</code> No documentation"},{"location":"minr_scripts/playerclickhandler/InteractEntity/","title":"InteractEntity","text":"<p>This is a class that holds utility functions for the <code>minecraft:interact</code> entity that rides the player</p>"},{"location":"minr_scripts/playerclickhandler/InteractEntity/#constructors","title":"Constructors","text":"Constructor Description <code>InteractEntity InteractEntity(Player player)</code> Create an interact entity, and attach it to the player"},{"location":"minr_scripts/playerclickhandler/InteractEntity/#methods","title":"Methods","text":"Method Description <code>InteractEntity InteractEntity(Player player)</code> Create an interact entity Internal <code>Void onInteract(Player player)</code> Function triggered on interact <code>Void setRemainingUses(Int n)</code> Set the number of uses for this InteractEntity. Kills the interact entity after usages are used up <code>Void setInfiniteUses()</code> Set infinite uses <code>Void kill()</code> Kill this interact entity, and trigger all onKillBindings <p>Note: to add bindings, the intended method is to access the functions of <code>onInteractBindings</code> and <code>onKillBindings</code> directly.</p>"},{"location":"minr_scripts/playerclickhandler/InteractEntity/#fields","title":"Fields","text":"Field Description <code>playerclickhandler::BindingList onInteractBindings</code> List of bindings on the interact entity  All bindings are triggered on each click <code>playerclickhandler::BindingList onKillBindings</code> List of bindings on the interact entity  All bindings are triggered when the entity dies <code>Int remainingUses</code> Number of remaining uses Internal <code>Boolean hasLimitedUses</code> Whether to count down Internal <code>Entity entity</code> Internal entity Internal <code>Player player</code> Player the entity rides on"},{"location":"minr_scripts/stringhashmap/","title":"Index","text":"<p>Scripting msc Github</p>"},{"location":"minr_scripts/stringhashmap/#string-hash-map","title":"String Hash Map","text":"<p>This is an implementation of string:string hashmaps in minr.</p> <p>Example Code (copied from <code>tests()</code>)</p> <pre><code>@using stringHashMap\n\n@define SHashMap testMap = SHashMap()\n@player \"Setting Test Value\"\n@var testMap.set(\"Test Value\", \"Success!\")\n\n@player \"Value at Test Value (e: 'Success!'):\"\n@player {{testMap.get(\"Test Value\")}}\n@player \"Value at Bad Value (e: null):\"\n@player {{testMap.get(\"Bad Value\")}}\n@player \"Value at Bad Value (tryGetDefault) (e: 'Not Found!'):\"\n@player {{testMap.tryGetDefault(\"Bad Value\", \"Not Found!\")}}\n</code></pre>"},{"location":"minr_scripts/stringhashmap/#classes","title":"Classes","text":"Class Description <code>SHashMap</code> The string hash map object <code>KeyValuePair</code> A structure that holds associated keys and values Internal <code>KVPArrayWrapper</code> A structure that holds an array of <code>KeyValuePair</code>"},{"location":"minr_scripts/stringhashmap/#functions","title":"Functions","text":"Function Description <code>Int hash(String s)</code> Return a hash of a string, from 1 to 997 <code>Int getCharIndex(String char)</code> Get the position of the input character in <code>alphabet</code> Internal <code>tests()</code> Unit tests for the SHashMap module"},{"location":"minr_scripts/stringhashmap/#variables","title":"Variables","text":"Variable Description Internal <code>Int arraySize</code> The size of the array used to store the values. Set to 997 as a constant Internal <code>String alphabet</code> List of all ascii characters, in order"},{"location":"minr_scripts/stringhashmap/KeyValuePair/","title":"KeyValuePair","text":"<p>This is a structiure holding pairs of keys and values</p>"},{"location":"minr_scripts/stringhashmap/KeyValuePair/#fields","title":"Fields","text":"Field Description <code>String key</code> The associated key <code>String value</code> The associated value"},{"location":"minr_scripts/stringhashmap/KeyValuePair/#constructors","title":"Constructors","text":"Constructor Description <code>KeyValuePair(String key, String value)</code> Create an KeyValuePair with key <code>key</code> and value <code>value</code>"},{"location":"minr_scripts/stringhashmap/SHashMap/","title":"SHashMap","text":"<p>This class offers all the hashmap functionality. Hash collisions are handled with separate chaining.</p>"},{"location":"minr_scripts/stringhashmap/SHashMap/#fields","title":"Fields","text":"Field Description Internal <code>KVPArrayWrapper[] hashMap</code> The variable that the hashmap is actually stored in. <code>String[] keys</code> All keys saved in the hashmap. Shouldn't be written to directly, but can be iterated over freely."},{"location":"minr_scripts/stringhashmap/SHashMap/#constructors","title":"Constructors","text":"Constructor Description <code>SHashMap()</code> Create an empty SHashMap"},{"location":"minr_scripts/stringhashmap/SHashMap/#methods","title":"Methods","text":"Method Description <code>set(String key, String value)</code> Set the key <code>key</code> to value <code>value</code> <code>String get(String key)</code> Get the value associated with <code>key</code>. Returns the null value (<code>\"null\"</code>) if not found <code>String tryGetDefault(String key, String defaultValue)</code> Try to get the value associated with <code>key</code>, return <code>defaultValue</code> if not found <code>String remove(String key)</code> Remove the key <code>key</code> and associated value from the SHashMap"},{"location":"minr_scripts/worldUtils/","title":"Index","text":"<p>Scripting msc</p>"},{"location":"minr_scripts/worldUtils/#worldutils","title":"worldUtils","text":"<p>This is the default generated description for the namespace worldUtils. Include code examples, screenshots, ect. here.</p>"},{"location":"minr_scripts/worldUtils/#classes","title":"Classes","text":"Class Description"},{"location":"minr_scripts/worldUtils/#functions","title":"Functions","text":"Function Description <code>String parse_world(String world)</code> parse bukkit world to vanilla TODO: add epsilon?"},{"location":"minr_scripts/worldUtils/#variables","title":"Variables","text":"Variable Description <code>stringHashMap::SHashMap worlds</code> No documentation"}]}